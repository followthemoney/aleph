version: "3.2"

services:
  postgres:
    image: postgres:10.0
    hostname: postgres
    ports:
      - "127.0.0.1:15432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: aleph
      POSTGRES_PASSWORD: aleph
      POSTGRES_DATABASE: aleph

  elasticsearch:
    image: ghcr.io/alephdata/aleph-elasticsearch:3bb5dbed97cfdb9955324d11e5c623a5c5bbc410
    hostname: elasticsearch
    restart: on-failure
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "127.0.0.1:19200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  redis:
    image: redis:alpine
    command: ["redis-server", "--save", "3600", "10"]
    volumes:
      - redis-data:/data

  convert-document:
    image: ghcr.io/alephdata/convert-document:latest
    read_only: true
    restart: on-failure
    user: app
    tmpfs: /tmp

  ingest-file:
    image: ghcr.io/alephdata/ingest-file:latest
    hostname: ingest
    tmpfs: /tmp
    volumes:
      - archive-data:/data
    depends_on:
      - postgres
      - redis
      - convert-document
    restart: on-failure
    env_file:
      - aleph.env

  extractmeta:
    image: ghcr.io/ftmnl/extractmeta:latest
    restart: on-failure
    env_file:
      - aleph.env

  worker:
    image: alephdata/aleph:${ALEPH_TAG:-3.12.0}
    command: aleph worker
    restart: on-failure
    depends_on:
      - postgres
      - elasticsearch
      - redis
      - ingest-file
      - extractmeta
    tmpfs:
      - /tmp
    volumes:
      - archive-data:/data
    env_file:
      - aleph.env

  api:
    build:
      context: .
    image: alephdata/aleph:${ALEPH_TAG:-latest}
    command: python3 -m debugpy --listen 0.0.0.0:5678 -m flask run -h 0.0.0.0 -p 5000 --with-threads --reload --debugger
    ports:
      - "127.0.0.1:5000:5000"
      - "127.0.0.1:5678:5678"
    restart: on-failure
    depends_on:
      - postgres
      - elasticsearch
      - redis
      - extractmeta
      - ingest-file
    tmpfs: /tmp
    volumes:
      - archive-data:/data
      - "./aleph:/aleph/aleph"
      - "./site:/aleph/site"
    environment:
      ALEPH_DEBUG: "true"
      ALEPH_PROFILE: "false"
      ALEPH_SECRET_KEY: "development"
      FLASK_APP: "aleph.wsgi"
    env_file:
      - aleph.env

  ui:
    build:
      context: ui
    image: alephdata/aleph-ui:${ALEPH_TAG:-latest}
    depends_on:
      - api
    command: npm run start
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - "./ui/src:/alephui/src"
      - "./ui/package.json:/alephui/package.json"
    environment:
      PORT: "8080"
      CI: "true"
    env_file:
      - aleph.env

volumes:
  archive-data: {}
  elasticsearch-data: {}
  postgres-data: {}
  redis-data: {}
